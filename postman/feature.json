{
	"info": {
		"_postman_id": "24b3b5f0-843e-4e82-99f8-0cf10e9eb587",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37378487"
	},
	"item": [
		{
			"name": "Добавление лайка событию",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    1000 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
							"    pm.response.to.be.success;\r",
							"    pm.response.to.be.withBody; \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"поле likes должно увеличится\", function(){\r",
							"    pm.expect(target.likes).equal(1);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "localhost:8080/users/1/events/1/like",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"events",
						"1",
						"like"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление дизлайка событию",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    1000 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
							"    pm.response.to.be.success;\r",
							"    pm.response.to.be.withBody; \r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"поле dislikes должно увеличится\", function(){\r",
							"    pm.expect(target.dislikes).equal(1);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "localhost:8080/users/1/events/1/dislike",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"events",
						"1",
						"dislike"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка событий сортированных по количеству лайков",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody; \r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/events/rating/likes",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"rating",
						"likes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка событий сортированных по дизлайкам",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody; \r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/events/rating/dislikes",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"rating",
						"dislikes"
					]
				}
			},
			"response": []
		},
		{
			"name": "получение списка авторов событий отсортированных по общему количеству лайков на их событиях",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody; \r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/users/rating/likes",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"rating",
						"likes"
					]
				}
			},
			"response": []
		},
		{
			"name": "получение списка авторов событий отсортированных по общему количеству дизлайков на их событиях",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody; \r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/users/rating/dislikes",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"rating",
						"dislikes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение события с его лайками и дизлайками",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody; \r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    1000 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/events/1/stats",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"1",
						"stats"
					]
				}
			},
			"response": []
		}
	]
}